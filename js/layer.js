// Generated by CoffeeScript 1.7.1
(function() {
  var Fill, LayerObject, Pad, Trace, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  LayerObject = (function() {
    function LayerObject(shape, x, y, params) {
      this.shape = shape;
      this.x = x;
      this.y = y;
      this.size = null;
      this.parseParams(params);
    }

    LayerObject.prototype.parseParams = function(p) {
      switch (this.shape) {
        case 'C':
          if (p[0] == null) {
            throw "BadCircleParamsError";
          }
          return this.size = p[0];
        case 'R':
          if (!(p.length > 1)) {
            throw "BadRectParamsError";
          }
          return this.size = p.slice(0, 2);
      }
    };

    return LayerObject;

  })();

  Pad = (function(_super) {
    __extends(Pad, _super);

    function Pad() {
      return Pad.__super__.constructor.apply(this, arguments);
    }

    Pad.prototype.parseParams = function(p) {
      switch (this.shape) {
        case 'C':
          this.holeX = p[1] != null ? p[1] : null;
          this.holeY = p[2] != null ? p[2] : null;
          break;
        case 'R':
        case 'O':
          this.holeX = p[2] != null ? p[2] : null;
          this.holeY = p[3] != null ? p[3] : null;
      }
      return Pad.__super__.parseParams.call(this, p);
    };

    Pad.prototype.draw = function(drawing) {
      var h, m, p, pad;
      pad = null;
      switch (this.shape) {
        case 'C':
          console.log("circular pad at " + this.x + ", " + this.y);
          pad = drawing.circle(this.size).center(this.x, this.y);
          break;
        case 'R':
          console.log("rectangular pad at " + this.x + ", " + this.y);
          pad = drawing.rect(this.size[0], this.size[1]).center(this.x, this.y);
          break;
        case 'O':
          console.log("obround pad");
          break;
        case 'P':
          console.log("polygon pad");
          break;
        default:
          console.log("unrecognized shape");
      }
      if (this.holeX != null) {
        p = pad.clone().fill({
          color: '#fff'
        });
        h = null;
        if (this.holeY != null) {
          h = drawing.rect(this.holeX, this.holeY);
        } else {
          h = drawing.circle(this.holeX);
        }
        h.center(pad.cx(), pad.cy()).fill({
          color: '#000'
        });
        m = drawing.mask().add(p).add(h);
        return pad.maskWith(m);
      }
    };

    return Pad;

  })(LayerObject);

  Trace = (function(_super) {
    __extends(Trace, _super);

    function Trace() {
      return Trace.__super__.constructor.apply(this, arguments);
    }

    Trace.prototype.parseParams = function(p) {
      switch (this.shape) {
        case 'C':
          if (p.length !== 3) {
            throw "BadCircleTraceError";
          }
          this.end = p.slice(1, 3);
          break;
        case 'R':
          if (p.length !== 4) {
            throw "BadRectTraceError";
          }
          this.end = p.slice(2, 4);
          break;
        default:
          throw "InvalidTraceShapeError";
      }
      return Trace.__super__.parseParams.call(this, p);
    };

    Trace.prototype.draw = function(drawing) {
      var trace;
      if (this.shape === 'C') {
        trace = drawing.line();
        trace.stroke({
          width: this.size,
          linecap: 'round'
        });
        return trace.plot(this.x, this.y, this.end[0], this.end[1]);
      } else if (this.shape === 'R') {
        return console.log("fancy trace");
      }
    };

    return Trace;

  })(LayerObject);

  Fill = (function(_super) {
    __extends(Fill, _super);

    function Fill() {
      return Fill.__super__.constructor.apply(this, arguments);
    }

    return Fill;

  })(LayerObject);

  root.Layer = (function() {
    function Layer(name) {
      this.name = name;
      this.layerObjects = [];
    }

    Layer.prototype.addObject = function(action, tool, params) {
      var p, t;
      switch (action) {
        case 'T':
          return t = new Trace(tool.shape, tool.params);
        case 'P':
          return p = new Pad(tool.shape, tool.params);
        case 'F':
          return console.log("create a fill or something");
        default:
          throw "" + action + "_IsInvalidInputTo_Layer::addObject_Error";
      }
    };

    Layer.prototype.draw = function(id) {
      var o, svg, _i, _len, _ref, _results;
      svg = SVG(id);
      _ref = this.layerObjects;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        _results.push(o.draw(svg));
      }
      return _results;
    };

    return Layer;

  })();

}).call(this);

//# sourceMappingURL=layer.map
