// Generated by CoffeeScript 1.7.1
(function() {
  var Aperture, Plotter, aps, coordFormat, createAperture, fileToSVG, findLine, getGerberApertures, getGerberFormat, getGerberUnits, handleFileSelect, readFileToDiv, units;

  coordFormat = {
    zeros: 'D',
    xLead: 5,
    xTrail: 5,
    yLead: 5,
    yTrail: 5
  };

  units = 'M';

  aps = [];

  Plotter = (function() {
    function Plotter(a, cF, u) {
      this.a = a;
      this.cF = cF;
      this.u = u;
      this.xPosition = 0;
      this.yPosition = 0;
    }

    Plotter.prototype.plot = function(gerber) {
      var line, x, y, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = gerber.length; _i < _len; _i++) {
        line = gerber[_i];
        console.log("parsing line: " + line);
        if (line.match(/^G04/)) {
          _results.push(console.log("comment"));
        } else if (line.match("M02")) {
          console.log("end of file");
          break;
        } else {
          if (line.match(/^(G54)?D\d{2,}/)) {
            console.log("tool change");
            this.changeTool(line.match(/D\d{2,}/)[0].slice(1));
            console.log("new tool: " + this.tool.print());
          }
          if ((line.match('X') || line.match('Y')) && line.match('D')) {
            console.log("command with movement");
            x = line.match(/X[\d\.-]{1,12}/);
            y = line.match(/Y[\d\.-]{1,12}/);
            if (x != null) {
              x = this.parseCoordinate(x[0].slice(1), this.cF.xLead, this.cF.xTrail);
            }
            if (y != null) {
              y = this.parseCoordinate(y[0].slice(1), this.cF.yLead, this.cF.yTrail);
            }
            _results.push(this.move(x, y));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    Plotter.prototype.parseCoordinate = function(c, ld, tr) {
      var lead, trail, z;
      z = this.cF.zeros;
      lead = 0;
      trail = 0;
      if (z === 'L') {
        lead = c.slice(0, +(-tr - 1) + 1 || 9e9);
        trail = c.slice(-tr);
        return parseFloat(lead + "." + trail);
      } else if (z === 'T') {
        lead = c.slice(0, +(ld - 1) + 1 || 9e9);
        trail = c.slice(ld);
        return parseFloat(lead + "." + trail);
      }
    };

    Plotter.prototype.changeTool = function(toolNumber) {
      return this.tool = this.a[toolNumber];
    };

    Plotter.prototype.move = function(xNew, yNew) {
      if (xNew == null) {
        xNew = this.xPosition;
      }
      if (yNew == null) {
        yNew = this.yPosition;
      }
      console.log("moving to " + xNew + ", " + yNew);
      this.xPosition = xNew;
      return this.yPosition = yNew;
    };

    Plotter.prototype.traceLine = function(aperture, x1, y1, x2, y2) {};

    return Plotter;

  })();

  Aperture = (function() {
    function Aperture(code, shape) {
      this.code = code;
      this.shape = shape;
      console.log(this.print());
    }

    Aperture.prototype.print = function() {
      return "aperture " + this.code + " is a " + (this.shape === 'C' ? "circle" : this.shape === 'R' ? "rectangle" : this.shape === 'O' ? "obcircle" : this.shape === 'P' ? "polygon" : void 0);
    };

    return Aperture;

  })();

  findLine = function(lines, pattern) {
    var line;
    line = 0;
    while (line < lines.length && !lines[line].match(pattern)) {
      line++;
    }
    return line;
  };

  createAperture = function(lineText) {
    var code, shape;
    code = lineText.match(/D\d{2,}/)[0].slice(1);
    shape = lineText.match(/[CROP]/)[0];
    return aps[code] = new Aperture(code, shape);
  };

  getGerberApertures = function(lines) {
    var apertureMatch, foundLines, line;
    apertureMatch = /^%ADD\d{2,}((C,\d*\.\d+(X\d*\.\d+){0,2})|([RO],\d*\.\d+(X\d*\.\d+){1,3})|(P,\d*\.\d+X([3-9]|1[0-2])(X-?\d*\.\d+(X\d*\.\d+){0,2})?))\*%$/;
    foundLines = [];
    line = 0;
    while (line < lines.length) {
      line = findLine(lines, apertureMatch);
      if (line < lines.length) {
        createAperture(lines[line]);
        lines = lines.slice(line + 1);
      }
    }
    return lines;
  };

  getGerberUnits = function(lines) {
    var currentLine, line, unitMatch;
    unitMatch = /^%MO((IN)|(MM))\*%/;
    line = findLine(lines, unitMatch);
    if (line < lines.length) {
      currentLine = lines[line];
      units = currentLine[3];
      console.log("units are " + (units === 'I' ? "inches" : "mm"));
      return lines.slice(line + 1);
    } else {
      console.log("no units specified");
      return [];
    }
  };

  getGerberFormat = function(lines) {
    var currentLine, formatMatch, line, _ref, _ref1;
    formatMatch = /^%FS[LT][AI](N\d+)?(G\d+)?X[0-5]{2}Y[0-5]{2}(D\d+)?(M\d+)?\*%$/;
    line = findLine(lines, formatMatch);
    if (line < lines.length) {
      currentLine = lines[line];
      coordFormat.zeros = currentLine.match(/[L,T,D]/)[0];
      _ref = currentLine.match(/X[0-5]{2}/)[0].slice(1, 3), coordFormat.xLead = _ref[0], coordFormat.xTrail = _ref[1];
      _ref1 = currentLine.match(/Y[0-5]{2}/)[0].slice(1, 3), coordFormat.yLead = _ref1[0], coordFormat.yTrail = _ref1[1];
      console.log("zero format: " + coordFormat.zeros);
      console.log("x format: " + coordFormat.xLead + ", " + coordFormat.xTrail);
      console.log("y format: " + coordFormat.yLead + ", " + coordFormat.yTrail);
      return lines.slice(line + 1);
    } else {
      console.log("no format information found");
      return [];
    }
  };

  fileToSVG = function(file) {
    var lines, p;
    lines = file.split("\n");
    lines = getGerberFormat(lines);
    lines = getGerberUnits(lines);
    lines = getGerberApertures(lines);
    console.log(lines);
    console.log(aps);
    p = new Plotter(aps, coordFormat, units);
    p.plot(lines);
    return "done";
  };

  readFileToDiv = function(event) {
    var textDiv;
    if (event.target.readyState === FileReader.DONE) {
      textDiv = document.createElement('p');
      textDiv.innerHTML = fileToSVG(event.target.result);
      return document.getElementById('file-contents').insertBefore(textDiv, null);
    }
  };

  handleFileSelect = function(event) {
    var f, importFiles, output, reader, _i, _j, _len, _len1, _results;
    importFiles = event.target.files;
    output = [];
    for (_i = 0, _len = importFiles.length; _i < _len; _i++) {
      f = importFiles[_i];
      output.push('<li><strong>', escape(f.name), '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
    _results = [];
    for (_j = 0, _len1 = importFiles.length; _j < _len1; _j++) {
      f = importFiles[_j];
      reader = new FileReader();
      reader.addEventListener('loadend', readFileToDiv, false);
      _results.push(reader.readAsText(f));
    }
    return _results;
  };

  document.getElementById('files').addEventListener('change', handleFileSelect, false);

}).call(this);

//# sourceMappingURL=filereader.map
