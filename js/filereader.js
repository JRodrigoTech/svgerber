// Generated by CoffeeScript 1.7.1
(function() {
  var Aperture, aps, coordFormat, createAperture, fileToSVG, findLine, getGerberApertures, getGerberFormat, getGerberUnits, handleFileSelect, readFileToDiv, units;

  coordFormat = {
    zeros: 'D',
    xLead: 5,
    xTrail: 5,
    yLead: 5,
    yTrail: 5
  };

  units = 'M';

  aps = [];

  Aperture = (function() {
    function Aperture(code, shape) {
      this.code = code;
      this.shape = shape;
      console.log(this.print());
    }

    Aperture.prototype.print = function() {
      return "aperture " + this.code + " is a " + (this.shape === 'C' ? "circle" : this.shape === 'R' ? "rectangle" : this.shape === 'O' ? "obcircle" : this.shape === 'P' ? "polygon" : void 0);
    };

    return Aperture;

  })();

  findLine = function(lines, pattern) {
    var line;
    line = 0;
    while (line < lines.length && !lines[line].match(pattern)) {
      line++;
    }
    return line;
  };

  createAperture = function(lineText) {
    var code, shape;
    code = lineText.match(/D\d{2,}/)[0].slice(1);
    shape = lineText.match(/[CROP]/)[0];
    return aps[code] = new Aperture(code, shape);
  };

  getGerberApertures = function(lines) {
    var apertureMatch, foundLines, line;
    apertureMatch = /^%ADD\d{2,}((C,\d*\.\d+(X\d*\.\d+){0,2})|([RO],\d*\.\d+(X\d*\.\d+){1,3})|(P,\d*\.\d+X([3-9]|1[0-2])(X-?\d*\.\d+(X\d*\.\d+){0,2})?))\*%$/;
    foundLines = [];
    line = 0;
    while (line < lines.length) {
      line = findLine(lines, apertureMatch);
      if (line < lines.length) {
        createAperture(lines[line]);
        lines = lines.slice(line + 1);
      }
    }
    return lines;
  };

  getGerberUnits = function(lines) {
    var currentLine, line, unitMatch;
    unitMatch = /^%MO((IN)|(MM))\*%/;
    line = findLine(lines, unitMatch);
    if (line < lines.length) {
      currentLine = lines[line];
      units = currentLine[3];
      console.log("units are " + (units === 'I' ? "inches" : "mm"));
      return lines.slice(line + 1);
    } else {
      console.log("no units specified");
      return [];
    }
  };

  getGerberFormat = function(lines) {
    var currentLine, formatMatch, line, _ref, _ref1;
    formatMatch = /^%FS[LTD][AI](N\d+)?(G\d+)?X[0-5]{2}Y[0-5]{2}(D\d+)?(M\d+)?\*%$/;
    line = findLine(lines, formatMatch);
    if (line < lines.length) {
      currentLine = lines[line];
      coordFormat.zeros = currentLine.match(/[L,T,D]/)[0];
      _ref = currentLine.match(/X[0-5]{2}/)[0].slice(1, 3), coordFormat.xLead = _ref[0], coordFormat.xTrail = _ref[1];
      _ref1 = currentLine.match(/Y[0-5]{2}/)[0].slice(1, 3), coordFormat.yLead = _ref1[0], coordFormat.yTrail = _ref1[1];
      console.log("zero format: " + coordFormat.zeros);
      console.log("x format: " + coordFormat.xLead + ", " + coordFormat.xTrail);
      console.log("y format: " + coordFormat.yLead + ", " + coordFormat.yTrail);
      return lines.slice(line + 1);
    } else {
      console.log("no format information found");
      return [];
    }
  };

  fileToSVG = function(file) {
    var lines;
    lines = file.split("\n");
    lines = getGerberFormat(lines);
    lines = getGerberUnits(lines);
    lines = getGerberApertures(lines);
    console.log(lines);
    return console.log(aps);
  };

  readFileToDiv = function(event) {
    var textDiv;
    if (event.target.readyState === FileReader.DONE) {
      textDiv = document.createElement('p');
      textDiv.innerHTML = fileToSVG(event.target.result);
      return document.getElementById('file-contents').insertBefore(textDiv, null);
    }
  };

  handleFileSelect = function(event) {
    var f, importFiles, output, reader, _i, _j, _len, _len1, _results;
    importFiles = event.target.files;
    output = [];
    for (_i = 0, _len = importFiles.length; _i < _len; _i++) {
      f = importFiles[_i];
      output.push('<li><strong>', escape(f.name), '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
    _results = [];
    for (_j = 0, _len1 = importFiles.length; _j < _len1; _j++) {
      f = importFiles[_j];
      reader = new FileReader();
      reader.addEventListener('loadend', readFileToDiv, false);
      _results.push(reader.readAsText(f));
    }
    return _results;
  };

  document.getElementById('files').addEventListener('change', handleFileSelect, false);

}).call(this);

//# sourceMappingURL=filereader.map
